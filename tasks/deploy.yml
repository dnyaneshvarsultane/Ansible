---

- name: REGISTRY Login AWS ECR
  shell: '$(aws ecr get-login --region {{ registry_region }} | sed "s/-e none//")'
  environment:
    AWS_ACCESS_KEY_ID: '{{ aws_access_key_id }}'
    AWS_SECRET_ACCESS_KEY: '{{ aws_secret_access_key }}'
  when: registry_type == 'aws-ecr'

- name: REGISTRY Login registry
  docker_login:
    registry: '{{ registry_scheme }}://{{ registry_url }}'
    username: '{{ registry_username }}'
    password: '{{ registry_password }}'
    reauthorize: yes
  when: registry_type == 'self-hosted'

- name: Find docker binary path
  shell: 'PATH=$PATH:/usr/local/bin which docker'
  register: docker_bin

- name: Rename old image
  shell: '{{ docker_bin.stdout }} tag {{ registry_url }}/{{ image_team }}/{{ image_project }}:{{ image_tag }} {{ registry_url }}/{{ image_team }}/{{ image_project }}:old'
  ignore_errors: yes

- name: REGISTRY Pull latest image
  docker_image:
    name: '{{ registry_url }}/{{ image_team }}/{{ image_project }}:{{ image_tag }}'
    force: yes
  when: registry_type == 'aws-ecr' or registry_type == 'self-hosted'

- name: ARCHIVE Download archive
  get_url:
    url: '{{ archive_url }}/{{ image_project }}-{{ image_tag }}.tar.gz'
    dest: '/tmp/{{ image_project }}-{{ image_tag }}.tar.gz'
    url_password: '{{ archive_username }}'
    url_username: '{{ archive_password }}'
  when: registry_type == 'archive-tar'

- name: ARCHIVE Unzip archive
  shell: 'gzip -d -f /tmp/{{ image_project }}-{{ image_tag }}.tar.gz'
  when: registry_type == 'archive-tar'

- name: ARCHIVE Load latest image
  docker_image:
    name: '{{ registry_url }}/{{ image_team }}/{{ image_project }}:{{ image_tag }}'
    load_path: '/tmp/{{ image_project }}-{{ image_tag }}.tar'
  when: registry_type == 'archive-tar'

- name: Remove container
  docker_container:
    name: '{{ container_name }}'
    state: absent
  async: 60
  poll: 5

- name: Start container
  docker_container:
    image: '{{ registry_url }}/{{ image_team }}/{{ image_project }}:{{ image_tag }}'
    name: '{{ container_name }}'
    env: '{{ container_environment }}'
    volumes: '{{ container_volumes }}'
    ports: '{{ container_ports }}'
    etc_hosts: '{{ container_extra_hosts }}'
    command: '{{ container_command }}'
    dns_servers: '{{ container_dns_servers }}'
    dns_search_domains: '{{ container_dns_search_domains }}'
    state: 'started'
    restart_policy: '{{ container_restart_policy }}'
    privileged: '{{ container_privileged }}'

- name: Logout registry
  docker_login:
    registry: '{{ registry_scheme }}://{{ registry_url }}'
    state: absent

- name: Remove images
  docker_image:
    state: absent
    name: '{{ registry_url }}/{{ image_team }}/{{ image_project }}'
    tag: 'old'
  ignore_errors: yes

- name: ARCHIVE Remove archive
  file:
    path: '{{ image_project }}-{{ image_tag }}.tar'
    state: absent
  when: registry_type == 'archive-tar'
